/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.amf.eventmonitor.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.amf.eventmonitor.model.Tracker;
import com.liferay.amf.eventmonitor.model.TrackerModel;
import com.liferay.amf.eventmonitor.model.TrackerSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Tracker service. Represents a row in the &quot;EventMonitor_Tracker&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link TrackerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TrackerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TrackerImpl
 * @see Tracker
 * @see TrackerModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class TrackerModelImpl extends BaseModelImpl<Tracker>
	implements TrackerModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tracker model instance should use the {@link Tracker} interface instead.
	 */
	public static final String TABLE_NAME = "EventMonitor_Tracker";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "userTrackerId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "screenName", Types.VARCHAR },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "sessionId", Types.VARCHAR },
			{ "remoteAddr", Types.VARCHAR },
			{ "RemoteHost", Types.VARCHAR },
			{ "userAgent", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userTrackerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("screenName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("sessionId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("remoteAddr", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("RemoteHost", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userAgent", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table EventMonitor_Tracker (uuid_ VARCHAR(75) null,userTrackerId LONG not null primary key,companyId LONG,userId LONG,screenName VARCHAR(75) null,modifiedDate DATE null,sessionId VARCHAR(75) null,remoteAddr VARCHAR(75) null,RemoteHost VARCHAR(75) null,userAgent VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table EventMonitor_Tracker";
	public static final String ORDER_BY_JPQL = " ORDER BY tracker.modifiedDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY EventMonitor_Tracker.modifiedDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.amf.eventmonitor.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.amf.eventmonitor.model.Tracker"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.amf.eventmonitor.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.amf.eventmonitor.model.Tracker"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.amf.eventmonitor.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.amf.eventmonitor.model.Tracker"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long UUID_COLUMN_BITMASK = 2L;
	public static final long MODIFIEDDATE_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Tracker toModel(TrackerSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Tracker model = new TrackerImpl();

		model.setUuid(soapModel.getUuid());
		model.setUserTrackerId(soapModel.getUserTrackerId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setScreenName(soapModel.getScreenName());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setSessionId(soapModel.getSessionId());
		model.setRemoteAddr(soapModel.getRemoteAddr());
		model.setRemoteHost(soapModel.getRemoteHost());
		model.setUserAgent(soapModel.getUserAgent());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Tracker> toModels(TrackerSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Tracker> models = new ArrayList<Tracker>(soapModels.length);

		for (TrackerSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.amf.eventmonitor.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.amf.eventmonitor.model.Tracker"));

	public TrackerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _userTrackerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUserTrackerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _userTrackerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Tracker.class;
	}

	@Override
	public String getModelClassName() {
		return Tracker.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("userTrackerId", getUserTrackerId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("screenName", getScreenName());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("sessionId", getSessionId());
		attributes.put("remoteAddr", getRemoteAddr());
		attributes.put("RemoteHost", getRemoteHost());
		attributes.put("userAgent", getUserAgent());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long userTrackerId = (Long)attributes.get("userTrackerId");

		if (userTrackerId != null) {
			setUserTrackerId(userTrackerId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String screenName = (String)attributes.get("screenName");

		if (screenName != null) {
			setScreenName(screenName);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String sessionId = (String)attributes.get("sessionId");

		if (sessionId != null) {
			setSessionId(sessionId);
		}

		String remoteAddr = (String)attributes.get("remoteAddr");

		if (remoteAddr != null) {
			setRemoteAddr(remoteAddr);
		}

		String RemoteHost = (String)attributes.get("RemoteHost");

		if (RemoteHost != null) {
			setRemoteHost(RemoteHost);
		}

		String userAgent = (String)attributes.get("userAgent");

		if (userAgent != null) {
			setUserAgent(userAgent);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getUserTrackerId() {
		return _userTrackerId;
	}

	@Override
	public void setUserTrackerId(long userTrackerId) {
		_userTrackerId = userTrackerId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getScreenName() {
		if (_screenName == null) {
			return StringPool.BLANK;
		}
		else {
			return _screenName;
		}
	}

	@Override
	public void setScreenName(String screenName) {
		_screenName = screenName;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getSessionId() {
		if (_sessionId == null) {
			return StringPool.BLANK;
		}
		else {
			return _sessionId;
		}
	}

	@Override
	public void setSessionId(String sessionId) {
		_sessionId = sessionId;
	}

	@JSON
	@Override
	public String getRemoteAddr() {
		if (_remoteAddr == null) {
			return StringPool.BLANK;
		}
		else {
			return _remoteAddr;
		}
	}

	@Override
	public void setRemoteAddr(String remoteAddr) {
		_remoteAddr = remoteAddr;
	}

	@JSON
	@Override
	public String getRemoteHost() {
		if (_RemoteHost == null) {
			return StringPool.BLANK;
		}
		else {
			return _RemoteHost;
		}
	}

	@Override
	public void setRemoteHost(String RemoteHost) {
		_RemoteHost = RemoteHost;
	}

	@JSON
	@Override
	public String getUserAgent() {
		if (_userAgent == null) {
			return StringPool.BLANK;
		}
		else {
			return _userAgent;
		}
	}

	@Override
	public void setUserAgent(String userAgent) {
		_userAgent = userAgent;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Tracker.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Tracker toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Tracker)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TrackerImpl trackerImpl = new TrackerImpl();

		trackerImpl.setUuid(getUuid());
		trackerImpl.setUserTrackerId(getUserTrackerId());
		trackerImpl.setCompanyId(getCompanyId());
		trackerImpl.setUserId(getUserId());
		trackerImpl.setScreenName(getScreenName());
		trackerImpl.setModifiedDate(getModifiedDate());
		trackerImpl.setSessionId(getSessionId());
		trackerImpl.setRemoteAddr(getRemoteAddr());
		trackerImpl.setRemoteHost(getRemoteHost());
		trackerImpl.setUserAgent(getUserAgent());

		trackerImpl.resetOriginalValues();

		return trackerImpl;
	}

	@Override
	public int compareTo(Tracker tracker) {
		int value = 0;

		value = DateUtil.compareTo(getModifiedDate(), tracker.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Tracker)) {
			return false;
		}

		Tracker tracker = (Tracker)obj;

		long primaryKey = tracker.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		TrackerModelImpl trackerModelImpl = this;

		trackerModelImpl._originalUuid = trackerModelImpl._uuid;

		trackerModelImpl._originalCompanyId = trackerModelImpl._companyId;

		trackerModelImpl._setOriginalCompanyId = false;

		trackerModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Tracker> toCacheModel() {
		TrackerCacheModel trackerCacheModel = new TrackerCacheModel();

		trackerCacheModel.uuid = getUuid();

		String uuid = trackerCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			trackerCacheModel.uuid = null;
		}

		trackerCacheModel.userTrackerId = getUserTrackerId();

		trackerCacheModel.companyId = getCompanyId();

		trackerCacheModel.userId = getUserId();

		trackerCacheModel.screenName = getScreenName();

		String screenName = trackerCacheModel.screenName;

		if ((screenName != null) && (screenName.length() == 0)) {
			trackerCacheModel.screenName = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			trackerCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			trackerCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		trackerCacheModel.sessionId = getSessionId();

		String sessionId = trackerCacheModel.sessionId;

		if ((sessionId != null) && (sessionId.length() == 0)) {
			trackerCacheModel.sessionId = null;
		}

		trackerCacheModel.remoteAddr = getRemoteAddr();

		String remoteAddr = trackerCacheModel.remoteAddr;

		if ((remoteAddr != null) && (remoteAddr.length() == 0)) {
			trackerCacheModel.remoteAddr = null;
		}

		trackerCacheModel.RemoteHost = getRemoteHost();

		String RemoteHost = trackerCacheModel.RemoteHost;

		if ((RemoteHost != null) && (RemoteHost.length() == 0)) {
			trackerCacheModel.RemoteHost = null;
		}

		trackerCacheModel.userAgent = getUserAgent();

		String userAgent = trackerCacheModel.userAgent;

		if ((userAgent != null) && (userAgent.length() == 0)) {
			trackerCacheModel.userAgent = null;
		}

		return trackerCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", userTrackerId=");
		sb.append(getUserTrackerId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", screenName=");
		sb.append(getScreenName());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", sessionId=");
		sb.append(getSessionId());
		sb.append(", remoteAddr=");
		sb.append(getRemoteAddr());
		sb.append(", RemoteHost=");
		sb.append(getRemoteHost());
		sb.append(", userAgent=");
		sb.append(getUserAgent());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.liferay.amf.eventmonitor.model.Tracker");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userTrackerId</column-name><column-value><![CDATA[");
		sb.append(getUserTrackerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>screenName</column-name><column-value><![CDATA[");
		sb.append(getScreenName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sessionId</column-name><column-value><![CDATA[");
		sb.append(getSessionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remoteAddr</column-name><column-value><![CDATA[");
		sb.append(getRemoteAddr());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>RemoteHost</column-name><column-value><![CDATA[");
		sb.append(getRemoteHost());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userAgent</column-name><column-value><![CDATA[");
		sb.append(getUserAgent());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Tracker.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Tracker.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _userTrackerId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _screenName;
	private Date _modifiedDate;
	private String _sessionId;
	private String _remoteAddr;
	private String _RemoteHost;
	private String _userAgent;
	private long _columnBitmask;
	private Tracker _escapedModel;
}